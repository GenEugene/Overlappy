####################################################################################################################
""" https://vk.com/geneugene3d """
####################################################################################################################
import maya.cmds as cmds
####################################################################################################################

def resetValues():
	
	global goalSmooth; goalSmooth = 1.5 # Сглаживание позиции
	global timeScale; timeScale = 0.3 # Скейл времени
	global goalW; goalW = 0.5 # Влияние физики
	global cycle; cycle = False # Проверка цикла
	
	global goalSmoothRot; goalSmoothRot = 1.5 # Сглаживание позиции частицы
	global timeScaleRot; timeScaleRot = 0.3 # Скейл времени
	global goalWRot; goalWRot = 0.5 # Влияние физики
	global cycleRot; cycleRot = False # Проверка цикла

	global slWidth; slWidth = 421 # Ширина ползунков
	global slHeight; slHeight = 25 # Высота зоны надписей
	global buttonHeight; buttonHeight = 50 # Высота кнопок
	
	global pRad; pRad = 0.253 # Размер меша частицы
	global pShape; pShape = 4 # Тип отображения частицы
	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	mainScriptName = "Overlappy "
	mainScriptVersion = "v0.01"
	
	posScriptLabelTAB = "     -------------------------     "
	posScriptName = "Translation overlapper   "
	posScriptVersion = "v0.09"
	global posScriptAnnotation; posScriptAnnotation = " Эта часть скрипта добавляет оверлапы перемещения\n на каждый выделенный объект по порядку. Если\n например меняется анимация у объектов ниже, то\n желательно удалить анимацию (слои) с объектов выше\n и перезапечь скриптом.\n\n Примеры использования:\n\n - желе\n - живот\n - грудь\n - щёки\n - пышные волосы\n - вязкая жидкость\n - другое подобное"
	
	rotScriptLabelTAB = "     ----------------------------     "
	rotScriptName = "Rotation overlapper   "
	rotScriptVersion = "v0.01"
	global rotScriptAnnotation; rotScriptAnnotation = " Добавляет оверлапы вращения на каждый\n выделенный объект по порядку, кроме\n последнего, так как тот является целевым\n для предыдущего в списке объекта.\n\n Примеры использования:\n\n хвосты \n конечности\n спина\n висячие верёвки\n упругие антенны"

	global windowName; windowName = mainScriptName + mainScriptVersion
	global posScriptLabel; posScriptLabel = posScriptLabelTAB + posScriptName + posScriptVersion
	global rotScriptLabel; rotScriptLabel = rotScriptLabelTAB + rotScriptName + rotScriptVersion
	
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
def resetSliders():
	cmds.checkBox( "checkCyclePos", e=True, v=cycle )
	cmds.floatSliderGrp( "s1", e=True, f=True, min=0.0, max=6.0, fmx=10, v=goalSmooth )
	cmds.floatSliderGrp( "s2", e=True, f=True, min=0.0, max=2.0, fmx=10, v=timeScale )
	cmds.floatSliderGrp( "s3", e=True, f=True, min=0.0, max=1.0, v=goalW )
	
	cmds.checkBox( "checkCycleRot", e=True, v=cycleRot )
	cmds.floatSliderGrp( "s4", e=True, f=True, min=0.0, max=6.0, fmx=10, v=goalSmoothRot )
	cmds.floatSliderGrp( "s5", e=True, f=True, min=0.0, max=2.0, fmx=10, v=timeScaleRot )
	cmds.floatSliderGrp( "s6", e=True, f=True, min=0.0, max=1.0, v=goalWRot )
	
	print "\n||| OVERLAPPY RESET |||\n"

####################################################################################################################

def uiCreation():
	
	if cmds.window( "main", exists = True ):
		cmds.deleteUI( "main" )

	overUI = cmds.window( "main", title=windowName, mxb=False, s=False )
	cmds.window( "main", e=True, wh=( 10, 10 ) , rtf=True )
	
	cmds.columnLayout( 'layout1', rs=4 )
	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	cmds.frameLayout( 'transLayout', l=posScriptLabel )
	
	cmds.floatSliderGrp( "s1", l='Smooth', f=True, min=0.0, max=6.0, fmx=10, 
	v=goalSmooth, cc=('goalSmooth=printSmoothV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Сглаживание позиции 2 до 5 ", el="~1.5" )
	
	cmds.floatSliderGrp( "s2", l='Scale', f=True, min=0.0, max=2.0, fmx=10, 
	v=timeScale, cc=('timeScale=printScaleV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Скейл скорости симуляции 0.5 до 1 ", el="~0.3" )
	
	cmds.floatSliderGrp( "s3", l='Weight', f=True, min=0.0, max=1.0, 
	v=goalW, cc=('goalW=printWeightV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Сила притяжения частицы 0.5 ", el="~0.5" )
	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	cmds.frameLayout( "rotLayout", l=rotScriptLabel )
	
	cmds.floatSliderGrp( "s4", l='Smooth', f=True, min=0.0, max=6.0, fmx=10, 
	v=goalSmoothRot, cc=('goalSmoothRot=printRotSmoothV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Сглаживание позиции 2 до 5 ", el="~0.5" )
	
	cmds.floatSliderGrp( "s5", l='Scale', f=True, min=0.0, max=2.0, fmx=10, 
	v=timeScaleRot, cc=('timeScaleRot=printRotScaleV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Скейл скорости симуляции 0.5 до 1 ", el="~0.3" )
	
	cmds.floatSliderGrp( "s6", l='Weight', f=True, min=0.0, max=1.0, 
	v=goalWRot, cc=('goalWRot=printRotWeightV()'), pre=1, cal=(1, "left"), w=slWidth, ann=" Сила притяжения частицы 0.5 ", el="~0.5" )
	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	cmds.frameLayout( "buttonLayout", l='     ---------------------------------------     BUTTONS' )
	cmds.rowColumnLayout( numberOfColumns=3, columnWidth=[ (1, 165), (2, 130), (3, 165) ] )
	
	
	cmds.checkBox( "checkCyclePos", label="Translation loop", v=cycle, cc=( 'cycle=checkCyclePos()' ) )
	cmds.separator( h=buttonHeight/2 , style='none' )
	cmds.checkBox( "checkCycleRot", label="Rotation loop", v=cycleRot, cc=( 'cycleRot=checkCycleRot()' ) )
	

	cmds.button( label="RUN translation sim", command=( 'translationStart()' ), bgc=( 0.3,0.85,1 ) , h=buttonHeight )
	cmds.separator( h=buttonHeight/2 , style='none' )
	cmds.button( label="RUN rotation sim", command=( 'rotationStart()' ), bgc=( 0.3,0.85,1 ) , h=buttonHeight )
	
	
	cmds.button( label="^^^ RESET translation ^^^", command=( 'print "RESET translation"' ), bgc=( 0.2,0.6,0.2 ) , h=buttonHeight, en=False )
	cmds.button( label="<<< RESET ALL >>>", command=( 'resetValues(); resetSliders()' ), bgc=( 0.6,1,0.45 ) , h=buttonHeight )
	cmds.button( label="^^^ RESET rotation ^^^", command=( 'print "RESET rotation"' ), bgc=( 0.2,0.6,0.2 ) , h=buttonHeight, en=False )

	
	cmds.text( l="^^ Translation description ^^", ann=posScriptAnnotation )
	cmds.button( label="!!! DELETE ALL !!!", command=( 'deleteMainLayer()' ), bgc=( 0.9,0.5,0.3 ) , h=buttonHeight, ann="Удаляет главный слой со всеми анимациями оверлаппера" )
	cmds.text( l="^^ Rotation description ^^", ann=rotScriptAnnotation )

	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	cmds.showWindow( overUI )

####################################################################################################################

def checkCyclePos():
	cycle = cmds.checkBox( "checkCyclePos", q=True, v=True )
	print "Translation loop =", cycle
	return cycle

def printSmoothV():
	goalSmooth = cmds.floatSliderGrp( "s1", q=True, v=True )
	print "Translation smooth =", goalSmooth
	return goalSmooth
	
def printScaleV():
	timeScale = cmds.floatSliderGrp( "s2", q=True, v=True )
	print "Translation scale =", timeScale
	return timeScale
	
def printWeightV():
	goalW = cmds.floatSliderGrp( "s3", q=True, v=True )
	print "Translation weight =", goalW
	return goalW

#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

def checkCycleRot():
	cycleRot = cmds.checkBox( "checkCycleRot", q=True, v=True )
	print "Rotation loop =", cycleRot
	return cycleRot

def printRotSmoothV():
	goalSmoothRot = cmds.floatSliderGrp ("s4", q=True, v=True)
	print "Rotation smooth =", goalSmoothRot
	return goalSmoothRot
	
def printRotScaleV():
	timeScaleRot = cmds.floatSliderGrp ("s5", q=True, v=True)
	print "Rotation scale =", timeScaleRot
	return timeScaleRot
	
def printRotWeightV():
	goalWRot = cmds.floatSliderGrp ("s6", q=True, v=True)
	print "Rotation weight =", goalWRot
	return goalWRot

#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

def deleteMainLayer():
	if ( cmds.objExists( "OVERLAPPY" )):
		cmds.delete( mainLayerName )
	else:
		print "\n||| Layer not created |||\n"

def resetLoopTime():
	cmds.playbackOptions (e=True, min=asT, max=aeT)
	cmds.currentTime (asT) # Установка времени в начало анимации

def setTimeToMin():
	cmds.currentTime (minLoopTime) # Установка времени в начало анимации

####################################################################################################################
### Main (need to rebuld code)

def translationStart():
	
	global asT; asT = cmds.playbackOptions (query=True, min=True) # Левая граница анимации
	global aeT; aeT = cmds.playbackOptions (query=True, max=True) # Правая граница анимации
	resetLoopTime()
	
	global listObjects; listObjects = cmds.ls (sl=True) # Список трансформов
	
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	global listFixed; listFixed = listObjects [:]

	for i in range (len(listFixed)):
		listFixed[i] = listFixed[i].replace("|", "_")

	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
	global mainLayerName; mainLayerName = "OVERLAPPY" # Имя главного слоя

	if (cmds.objExists(mainLayerName)):
		print "\n||| OVERLAPPY start |||\n"
	else:
		cmds.animLayer (mainLayerName)
		print "\n||| OVERLAPPY start ||| Layer created |||\n"

	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

	for i in range(len(listFixed)): # Основной цикл
		
		global aimLoc; aimLoc = listFixed[i] + "_aim_loc" # Имя аим локатора
		global tempLoc; tempLoc = listFixed[i] + "_temp_loc" # Имя физ локатора
		global tempPart; tempPart = listFixed[i] + "_temp_part" # Имя физ частицы
		global tempNucl; tempNucl = "nucleus1" # Имя физ ноды
	
		global partAimLoc; partAimLoc = aimLoc + ".translate" # Обращение к позиции аим локатора
		global partRtype; partRtype = tempPart + "Shape.particleRenderType" # Обращение к типу отображения частицы
		global partRrad; partRrad = tempPart + "Shape.radius" # Обращение к размеру частицы
		global partRsm; partRsm = tempPart + "Shape.goalSmoothness" # Обращение к мягкости физики
		global partRwe; partRwe = tempPart + "Shape.goalWeight[0]" # Обращение к весу ноды
		global partPos; partPos = tempPart + ".center" # Обращение к центру частицы
		global partNucl; partNucl = tempNucl + ".timeScale" # Обращение к скейлу времени физ ноды
		global nuclStart; nuclStart = tempNucl + ".startFrame" # Обращение к старту симуляции физ ноды
		
		cmds.spaceLocator (n = tempLoc) # Создаём физ локатор
		cmds.matchTransform (tempLoc, listObjects[i], pos=True) # Перемещаем локатор в пивот объекта
		
		objCenter = tempLoc + ".translate" # Обращение к центру объекта
		objC = cmds.getAttr (objCenter) # Записываем центр объекта
		
		locCenter = tempLoc + ".center" # Обращение к центру физ локатора
		locTr = tempLoc + ".translate" # Обращение к позиции физ локатора
		
		cmds.nParticle (p = objC, n = tempPart , c = 1) # Создаём частицу в целевой позиции
		cmds.goal (tempPart, w=goalW, utr=1, g = tempLoc)# Создаём физическую связь
		
		cmds.select (tempLoc, r=True) # Выделяем физ локатор
		cmds.select (listObjects[i], add=True) # Выделяем целевого родителя
		cmds.parent (r=True) # Создаём иерархию
		
		cmds.matchTransform (tempLoc, listObjects[i], pos=True) # Перемещаем локатор в пивот объекта


	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

		cmds.setAttr (partRtype, pShape)
		cmds.setAttr (partRrad, pRad)
		cmds.setAttr (partRsm, goalSmooth)
		cmds.setAttr (partRwe, goalW)
		cmds.setAttr (partNucl, timeScale)
		cmds.setAttr (nuclStart, asT)
		
	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

		cmds.duplicate (tempLoc, rr=True, n = aimLoc) # Дублируем локатор
		cmds.select (aimLoc, r=True) # Выделяем аим локатор
		cmds.parent (w=True) # Разбираем иерархию
		cmds.connectAttr (partPos, partAimLoc, f=True) # Привязываем аим локатор к частице
		
		global minLoopTime; minLoopTime = aeT * -2
		global maxLoopTime; maxLoopTime = aeT * 2
		
		if (cycle):
			
			cmds.setAttr (nuclStart, minLoopTime)
				
			cmds.bakeResults (aimLoc, t = (minLoopTime, maxLoopTime), sm=True, at = "translate") # Запекание аим локатора для цикла
			cmds.delete (tempLoc, tempPart, tempNucl) # Удаляем объекты физики

			
			setTimeToMin()
			
			cmds.select (aimLoc, r=True) # Выделяем аим локатор как родителя
			cmds.select (listObjects[i], add=True) # Выделяем объект как подчиненного
			cmds.parentConstraint (mo=True, sr=["x", "y", "z"], w = 1) # Создаём позиционный констрейн
			
			resetLoopTime()

		else:
			
			cmds.bakeResults (aimLoc,t = (asT, aeT), sm=True, at = "translate") # Запекание аим локатора для линейной анимации
			cmds.delete (tempLoc, tempPart, tempNucl) # Удаляем объекты физики
			
			resetLoopTime()
			
			cmds.select (aimLoc, r=True) # Выделяем аим локатор как родителя
			cmds.select (listObjects[i], add=True) # Выделяем объект как подчиненного
			cmds.parentConstraint (mo=True, sr=["x", "y", "z"], w = 1) # Создаём позиционный констрейн

	#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

		layerBase = "translate_" # Имя базы слоя
		layerName = layerBase + listFixed[i] # Имя слоя	
		layerComp = listFixed[i] + '_layer_{0}'.format("0") # Имя компонента слоя

		if (cmds.objExists(layerName)):
			
			cmds.bakeResults (listObjects[i], t = (asT, aeT), sm=True, bol=True, at = "translate") # Запекаем объект в слой
			cmds.select (listObjects[i], r=True)
			cmds.setInfinity (pri="cycle", poi="cycle")
			cmds.delete (aimLoc) # Удаляем объекты скрипта
			cmds.container("BakeResultsContainer", e=True, rc=True) # Удаляем контейнер
			cmds.animLayer ("BakeResults", e=True, p = layerName) # Переносим слой с анимацией в основной слой объекта
			cmds.rename ("BakeResults", layerComp) # Переименовываем слой
			cmds.deleteAttr( n=listObjects[i], at="blendParent1" )
			
			resetLoopTime()
		else:
			cmds.animLayer (layerName) # Создаём пустой слой для всех оверлапов объекта
			cmds.animLayer (layerName, e=True, p = mainLayerName) # Переносим базу слоя в главный слой
			cmds.bakeResults (listObjects[i], t = (asT, aeT), sm=True, bol=True, at = "translate") # Запекаем объект в слой
			cmds.select (listObjects[i], r=True)
			cmds.setInfinity (pri="cycle", poi="cycle")
			cmds.delete (aimLoc) # Удаляем объекты скрипта
			cmds.container("BakeResultsContainer", e=True, rc=True) # Удаляем контейнер
			cmds.animLayer ("BakeResults", e=True, p = layerName) # Переносим слой с анимацией в основной слой объекта
			cmds.rename ("BakeResults", layerComp) # Переименовываем слой
			cmds.deleteAttr( n=listObjects[i], at="blendParent1" )
			
			resetLoopTime()

		
		cmds.select (d=True) # Деселект
		
	for l in listObjects:
		cmds.select (l, add=True)
		
	print "\n||| OVERLAPPY end |||\n"


def rotationStart():
	
	global asT; asT = cmds.playbackOptions (query=True, min=True) # Левая граница анимации
	global aeT; aeT = cmds.playbackOptions (query=True, max=True) # Правая граница анимации
	resetLoopTime()
	
	global listObjects; listObjects = cmds.ls (sl=True) # Список трансформов
	
	if ( len(listObjects) <= 1 ):
		
		print "\n||| Need to select two or more objects |||\n"
	
	else:
			
		#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
		global listFixed; listFixed = listObjects [:]
	
		for i in range (len(listFixed)):
			listFixed[i] = listFixed[i].replace("|", "_")
	
	
		#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
		
		global mainLayerName; mainLayerName = "OVERLAPPY" # Имя главного слоя
	
		if (cmds.objExists(mainLayerName)):
			print "\n||| OVERLAPPY start |||\n"
		else:
			cmds.animLayer (mainLayerName)
			print "\n||| OVERLAPPY start ||| Layer created |||\n"
	
		#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	
		for i in range(len(listFixed)): # Основной цикл
			
			if ( i+1 != len(listFixed) ):
			
				global zeroLoc; zeroLoc = listFixed[i] + "_base_loc" # Имя нулевого локатора
				global aimLoc; aimLoc = listFixed[i] + "_aim_loc" # Имя следящего локатора
				global tempLoc; tempLoc = listFixed[i] + "_temp_loc" # Имя физического локатора
				global tempAimLoc; tempAimLoc = listFixed[i] + "_tempAim_loc" # Имя целевого локатора
				
				global tempPart; tempPart = listFixed[i] + "_temp_part" # Имя частицы
				global tempNucl; tempNucl = "nucleus1" # Имя физической ноды
				
				global partRtype; partRtype = tempPart + "Shape.particleRenderType" # Обращение к типу отображения частицы
				global partRrad; partRrad = tempPart + "Shape.radius" # Обращение к размеру частицы
				global partRsm; partRsm = tempPart + "Shape.goalSmoothness" # Обращение к мягкости физики
				global partRwe; partRwe = tempPart + "Shape.goalWeight[0]" # Обращение к весу ноды
				global partNucl; partNucl = tempNucl + ".timeScale" # Обращение к скейлу времени физ ноды
				global nuclStart; nuclStart = tempNucl + ".startFrame" # Обращение к старту симуляции физ ноды
				
			#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
				
				cmds.spaceLocator( n = zeroLoc ) # Создаём нулевой локатор
				cmds.spaceLocator( n = aimLoc ) # Создаём следящий локатор
				cmds.spaceLocator( n = tempLoc ) # Создаём физический локатор
				
				cmds.matchTransform ( zeroLoc, listObjects[i], pos=True ) # Перемещаем нулевой локатор в пивот главного объекта
				cmds.matchTransform ( tempLoc, listObjects[i+1], pos=True ) # Перемещаем физический локатор в пивот целевого объекта
				
				cmds.select( tempLoc, r=True ) # Выделяем физический локатор
				cmds.duplicate( n = tempAimLoc ) # Дублируем его и создаём целевой локатор
				
				cmds.select( listObjects[0], r=True ) # Выделяем главный объект
				cmds.select( zeroLoc, add=True ) # Выделяем нулевой локатор
				cmds.parentConstraint( mo=True, w = 1 ) # Создаём пэрент констрейн
				
				cmds.select( aimLoc, r=True ) # Выделяем следящий локатор
				cmds.select( zeroLoc, add=True ) # Выделяем нулевой локатор
				cmds.parent( r=True ) # Создаём иерархию
				
				cmds.select( listObjects[1], r=True ) # Выделяем целевой объект
				cmds.select( tempLoc, add=True ) # Выделяем физический локатор
				cmds.parentConstraint( mo=True, sr=["x", "y", "z"], w = 1 ) # Создаём позиционный констрейн
				
				aimPosName = tempLoc + ".translate" # Обращение к позиции физического локатора
				partCenter = tempPart + ".center" # Обращение к центру частицы
				aimLocPos = tempAimLoc + ".translate" # Обращение к позиции целевого локатора
				
				aimPos = cmds.getAttr( aimPosName ) # Берём позицию физического локатора
				cmds.nParticle( p = aimPos , n = tempPart , c = 1 ) # Создаём частицу в целевой позиции
				cmds.goal( tempPart, w=0.5, utr=1, g = tempLoc ) # Создаём физическую связь с физическим локатором
				cmds.connectAttr( partCenter, aimLocPos, f=True ) # Привязываем целевой локатор к частице
				
				cmds.select( tempAimLoc, r=True ) # Выделяем целевой локатор
				cmds.select( aimLoc, add=True ) # Выделяем следящий локатор
				cmds.aimConstraint( w=1, aim=(0, 1, 0), u=(0, 1, 0), wut="vector", wu=(0, 1, 0), sk="y" ) # Создаём аим констреён по двум осям
		
		
			#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
				
				cmds.setAttr (partRtype, pShape)
				cmds.setAttr (partRrad, pRad)
				cmds.setAttr (partRsm, goalSmoothRot)
				cmds.setAttr (partRwe, goalWRot)
				cmds.setAttr (partNucl, timeScaleRot)
				cmds.setAttr (nuclStart, asT)
				
			#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
		
				global minLoopTime; minLoopTime = aeT * -2
				global maxLoopTime; maxLoopTime = aeT * 2
		
		
				if (cycleRot):
					
					cmds.setAttr( nuclStart, minLoopTime )
					
					cmds.bakeResults( zeroLoc, t = (asT, aeT), sm=True, at=( "translate", "rotate") ) # Запекание нулевого локатора для цикла
					cmds.bakeResults( aimLoc, t = (minLoopTime, maxLoopTime), sm=True, at="rotate" ) # Запекание аим локатора для цикла
					cmds.delete( tempAimLoc, tempLoc, tempPart, tempNucl ) # Удаляем объекты физики
					
					zeroParent = zeroLoc + "_parentConstraint1"
					cmds.delete( zeroParent )
					
					setTimeToMin()
					
					cmds.select( aimLoc, r=True ) # Выделяем аим локатор как родителя
					cmds.select( listObjects[i], add=True ) # Выделяем объект как подчиненного
					cmds.parentConstraint( mo=True, st=["x", "y", "z"], w = 1 ) # Создаём ротэйт констрейн
					
					resetLoopTime()
		
				else:
					
					cmds.bakeResults( zeroLoc, t = (asT, aeT), sm=True, at=( "translate", "rotate") ) # Запекание нулевого локатора для линейной анимации
					cmds.bakeResults( aimLoc, t = (asT, aeT), sm=True, at="rotate" ) # Запекание аим локатора для линейной анимации
					cmds.delete( tempAimLoc, tempLoc, tempPart, tempNucl ) # Удаляем объекты физики
					
					zeroParent = zeroLoc + "_parentConstraint1"
					cmds.delete( zeroParent )
					
					resetLoopTime()
					
					cmds.select( aimLoc, r=True ) # Выделяем аим локатор как родителя
					cmds.select( listObjects[i], add=True ) # Выделяем объект как подчиненного
					cmds.parentConstraint( mo=True, st=["x", "y", "z"], w = 1 ) # Создаём ротэйт констрейн
		
			#||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
		
				layerBase = "rotate_" # Имя базы слоя
				layerName = layerBase + listFixed[i] # Имя слоя	
				layerComp = listFixed[i] + '_layer_{0}'.format("0") # Имя компонента слоя
		
				if ( cmds.objExists( layerName ) ):
					
					cmds.bakeResults( listObjects[i], t = (asT, aeT), sm=True, bol=True, at = "rotate" ) # Запекаем объект в слой
					cmds.select( listObjects[i], r=True )
					cmds.setInfinity( pri="cycle", poi="cycle" )
					cmds.delete( aimLoc, zeroLoc ) # Удаляем объекты скрипта
					cmds.container( "BakeResultsContainer", e=True, rc=True ) # Удаляем контейнер
					cmds.animLayer( "BakeResults", e=True, p = layerName ) # Переносим слой с анимацией в основной слой объекта
					cmds.rename( "BakeResults", layerComp ) # Переименовываем слой
					cmds.deleteAttr( n=listObjects[i], at="blendParent1" )
					
					resetLoopTime()
				else:
					cmds.animLayer( layerName ) # Создаём пустой слой для всех оверлапов объекта
					cmds.animLayer( layerName, e=True, p = mainLayerName ) # Переносим базу слоя в главный слой
					cmds.bakeResults( listObjects[i], t = (asT, aeT), sm=True, bol=True, at = "rotate" ) # Запекаем объект в слой
					cmds.select( listObjects[i], r=True )
					cmds.setInfinity( pri="cycle", poi="cycle" )
					cmds.delete( aimLoc, zeroLoc ) # Удаляем объекты скрипта
					cmds.container( "BakeResultsContainer", e=True, rc=True ) # Удаляем контейнер
					cmds.animLayer( "BakeResults", e=True, p = layerName ) # Переносим слой с анимацией в основной слой объекта
					cmds.rename( "BakeResults", layerComp ) # Переименовываем слой
					cmds.deleteAttr( n=listObjects[i], at="blendParent1" )
					
					resetLoopTime()
		
				
				cmds.select (d=True) # Деселект
		
	for l in listObjects:
		cmds.select (l, add=True)
		
	print "\n||| OVERLAPPY end |||\n"

####################################################################################################################
### Run code

resetValues()
uiCreation()

####################################################################################################################
### End