def translateConstrainiing2(i):
	setTimeToMin()
	resetRangeTime()

	temp_obj_node = "copyObj"
	cmds.duplicate( listObjects[i], po=True, n=temp_obj_node )

	cmds.select( aimLoc, r=True )
	cmds.select( temp_obj_node, add=True )

	attrX = temp_obj_node + '.translateX'
	attrY = temp_obj_node + '.translateY'
	attrZ = temp_obj_node + '.translateZ'

	lockX = cmds.getAttr( attrX, lock=True )
	lockY = cmds.getAttr( attrY, lock=True )
	lockZ = cmds.getAttr( attrZ, lock=True )

	if ( lockX != True ):
		cmds.parentConstraint( mo=False, st=["y","z"], sr=["x","y","z"], w = 1 )
	if ( lockY != True ):
		cmds.parentConstraint( mo=False, st=["x","z"], sr=["x","y","z"], w = 1 )
	if ( lockZ != True ):
		cmds.parentConstraint( mo=False, st=["x","y"], sr=["x","y","z"], w = 1 )

def translationBakingToLayer2(i):
	cmds.copyKey( temp_obj_node )
	cmds.pasteKey( listObjects[i], o="replace", al=L_name )

	cmds.delete( aimLoc )
	resetRangeTime()

def layersCreation():

	global layerName; layerName = translateLayerBase + listFixed[i]
	global layerComp; layerComp = listFixed[i] + '_layer_{0}'.format("1")
	
	L_name = "haha_layer"

	if( cmds.objExists( mainLayerName ) ):
		print "\n||| OVERLAPPY start |||\n"
	else:
		cmds.animLayer( mainLayerName )
		print "\n||| OVERLAPPY start ||| Layer created |||\n"

	cmds.select( listObjects[i], r=True )
	cmds.animLayer( L_name, aso=True, o=True )

def translationScript_refined():

	#### Start translation script ####
	playbackRangeInit()
	global listObjects; listObjects = cmds.ls( sl=True ) # Get list of selected object
	global listFixed; listFixed = listObjects [:]

	if ( len(listObjects) == 0 ):
		print "\n||| Need to select 1 or more objects |||\n"
		
	else:
		print "\n||| Selected {0} objects |||\n".format( len(listObjects) )
		progBar(len(listObjects)) # start progress bar window

		for i in range( len( listFixed ) ):
			listFixed[i] = listFixed[i].replace( "|", "_" )
			listFixed[i] = listFixed[i].replace( ":", "_" )

		for i in range( len( listFixed ) ):
			cmds.progressBar( progressControl, edit=True, step=stepValue )

			#### Set local names ####
			global aimLoc; aimLoc = listFixed[i] + "_aim_loc" # Aim locator name
			global tempLoc; tempLoc = listFixed[i] + "_temp_loc" # Physical locator name

			global tempPart; tempPart = listFixed[i] + "_temp_part" # nParticle name
			global tempNucl; tempNucl = "nucleus1" # Nucleus node name

			global partAimLoc; partAimLoc = aimLoc + ".translate" # Aim locator position pull
			global partRtype; partRtype = tempPart + "Shape.particleRenderType" # nParticle render type pull
			global partRrad; partRrad = tempPart + "Shape.radius" # nParticle shape radius
			global partRsm; partRsm = tempPart + "Shape.goalSmoothness" # Goal smoothness pull
			global partRwe; partRwe = tempPart + "Shape.goalWeight[0]" # Goal weight pull
			global partPos; partPos = tempPart + ".center" # nParticle center position pull
			global partNucl; partNucl = tempNucl + ".timeScale" # Time scale pull
			global nuclStart; nuclStart = tempNucl + ".startFrame" # Start frame of simulation nucleus node

			#### Create main logic ####
			cmds.spaceLocator( n = tempLoc )
			cmds.matchTransform( tempLoc, listObjects[i], pos=True )

			objC = cmds.getAttr( tempLoc + ".translate" ) #+

			cmds.nParticle( p = objC, n = tempPart , c = 1 )
			cmds.goal( tempPart, w=goalW, utr=1, g = tempLoc )

			cmds.parent( tempLoc, listObjects[i], r=True ) #+
			cmds.matchTransform( tempLoc, listObjects[i], pos=True )

			cmds.duplicate( tempLoc, rr=True, n = aimLoc )
			cmds.parent( aimLoc, w=True ) #+
			cmds.connectAttr( partPos, partAimLoc, f=True )

			#### Set particle attributes ####
			cmds.setAttr( partRtype, pShape )
			cmds.setAttr( partRrad, pRad )
			cmds.setAttr( partRsm, goalSmooth )
			cmds.setAttr( partRwe, goalW )
			cmds.setAttr( partNucl, timeScale )
			cmds.setAttr( nuclStart, asT )

			#### Baking ####
			if( cycle ):
				print "\n||| Cycled baking |||\n"
				cmds.setAttr( nuclStart, minLoopTime )
				translateConstrainiing2(i)
				cmds.bakeResults( temp_obj_node, t = ( minLoopTime, maxLoopTime ), sm=True, at = "translate")

			else:
				print "\n||| Default baking |||\n"
				translateConstrainiing2(i)
				cmds.bakeResults( temp_obj_node, t = ( asT, aeT ), sm=True, at = "translate" )

			#### Set infinity, delete unused ####
			cmds.select( temp_obj_node, r=True )
			if (cycle):
				print '\n||| Infinity changed to "Cycle" |||\n'
				cmds.setInfinity( pri="cycle", poi="cycle" )
			else:
				print '\n||| Infinity changed to "Constant" |||\n'
				cmds.setInfinity( pri="constant", poi="constant" )

			cmds.delete( tempLoc, tempPart, tempNucl )

			#### Copy/Paste keys, clear nodes, deselect ####
			if ( cmds.objExists( layerName ) ):
				translationBakingToLayer2(i)

			else:
				cmds.animLayer( layerName )
				cmds.animLayer( layerName, e=True, p = mainLayerName )

				translationBakingToLayer2(i)

			cmds.select (d=True)
		
		#### Select list in initial order, close progressbar ####
		for l in listObjects:
			cmds.select (l, add=True)
			
		closeProgressBar()

		print "\n||| OVERLAPPY ends translation baking |||\n"

		#### End translation script ####