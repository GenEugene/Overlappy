

playback_range_initialization()
reset_range_time()

global list_objects; list_objects = cmds.ls(sl = True)

#if (len(list_objects) <= 1):
#	print "\n||| Need to select 2 or more objects |||"
#else:
#setup_progressbar((len(list_objects) - 1)) # start progress bar window

global list_fixed; list_fixed = list_objects [:]

for i in range(len(list_fixed)): # cycle for generate names from list
	list_fixed[i] = list_fixed[i].replace("|", "_")
	list_fixed[i] = list_fixed[i].replace(":", "_")

if (cmds.objExists(root_layer_name)):
	print "\n||| OVERLAPPY start |||"
else:
	cmds.animLayer(root_layer_name)
	print "\n||| OVERLAPPY start ||| Layer created |||"

#for i in range(len(list_fixed)): # start rotation cycle
i = 0
#cmds.progressBar(progressControl, edit = True, step = progress_step_value)

#if (i + 1 != len(list_fixed)):

global zeroLoc; zeroLoc = list_fixed[i] + "_base_loc"
global aim_locator; aim_locator = list_fixed[i] + "_aim_loc"
global temp_locator; temp_locator = list_fixed[i] + "_temp_loc"
global tempAimLoc; tempAimLoc = list_fixed[i] + "_tempAim_loc"
global offsetAimLoc; offsetAimLoc = list_fixed[i] + "_offsetAim_loc"

global np_name; np_name = list_fixed[i] + "_temp_part"
global nucleus_name; nucleus_name = "nucleus1"

global np_render_type; np_render_type = np_name + "Shape.particleRenderType"
global np_shape_radius; np_shape_radius = np_name + "Shape.radius"
global np_goal_smooth; np_goal_smooth = np_name + "Shape.goalSmoothness"
global np_goal_weight; np_goal_weight = np_name + "Shape.goalWeight[0]"

global nucleus_timeScale; nucleus_timeScale = nucleus_name + ".timeScale"
global nucleus_start; nucleus_start = nucleus_name + ".startFrame"

aim_vector_reverse = False ### TEST

if aim_vector_reverse:
	rotAimVector = -1
else:
	rotAimVector = 1

#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

cmds.spaceLocator(n = zeroLoc)
cmds.spaceLocator(n = aim_locator)
cmds.spaceLocator(n = temp_locator)

cmds.matchTransform (zeroLoc, list_objects[i], pos = True, rot = True)
cmds.matchTransform (temp_locator, list_objects[i + 1], pos = True, rot = True)

cmds.select(temp_locator, r = True)
cmds.duplicate(n = tempAimLoc)

cmds.select(list_objects[i], r = True)
cmds.select(zeroLoc, add = True)
cmds.parentConstraint(mo = True, w = 1)

cmds.select(aim_locator, r = True)
cmds.select(zeroLoc, add = True)
cmds.parent(r = True)


cmds.select(aim_locator, r = True) #+
cmds.duplicate(n = offsetAimLoc) #+


cmds.select(list_objects[i + 1], r = True)
cmds.select(temp_locator, add = True)
cmds.parentConstraint(mo = True, sr = ["x", "y", "z"], w = 1)

aimPosName = temp_locator + ".translate"
partCenter = np_name + ".center"
aim_locatorPos = tempAimLoc + ".translate"

aimPos = cmds.getAttr(aimPosName)
cmds.nParticle(p = aimPos, n = np_name, c = 1)
cmds.goal(np_name, w = 0.5, utr = 1, g = temp_locator)
cmds.connectAttr(partCenter, aim_locatorPos, f = True)

cmds.select(tempAimLoc, r = True)
cmds.select(aim_locator, add = True)
cmds.aimConstraint(w = 1, aim = (0, rotAimVector, 0), u = (0, 1, 0), wut = "vector", wu = (0, 1, 0), sk = "y")

cmds.select(aim_locator, r = True) #+
cmds.select(offsetAimLoc, add = True) #+
cmds.parentConstraint(mo = True, st = ["x","y","z"], w = 1) #+

#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

cmds.setAttr (np_render_type, particle_shape)
cmds.setAttr (np_shape_radius, particle_radius)
cmds.setAttr (np_goal_smooth, R_goal_smooth)
cmds.setAttr (np_goal_weight, R_goal_weight)
cmds.setAttr (nucleus_timeScale, R_time_scale)
cmds.setAttr (nucleus_start, start_time)

#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

#if (check_cycle):
#
#	cmds.setAttr(nucleus_start, min_loop_time)
#	cmds.bakeResults(zeroLoc, t = (min_loop_time, max_loop_time), sm = True, at = ("translate", "rotate"))
#	cmds.bakeResults(aim_locator, t = (min_loop_time, max_loop_time), sm = True, at = "rotate")
#	R_constraining(i)

#else:
	
cmds.bakeResults(zeroLoc, t = (start_time, end_time), sm = True, at = ("translate", "rotate"))
cmds.bakeResults(aim_locator, t = (start_time, end_time), sm = True, at = "rotate")

#R_constraining(i)

cmds.delete(tempAimLoc, temp_locator, np_name, nucleus_name)
zeroParent = zeroLoc + "_parentConstraint1"
cmds.delete(zeroParent)

set_time_to_start()
reset_range_time()

#cmds.select(aim_locator, r = True) #-
cmds.select(offsetAimLoc, r = True) #+
cmds.select(list_objects[i], add = True)

attrX = list_objects[i] + '.rotateX'
attrY = list_objects[i] + '.rotateY'
attrZ = list_objects[i] + '.rotateZ'

lockX = cmds.getAttr(attrX, lock = True)
lockY = cmds.getAttr(attrY, lock = True)
lockZ = cmds.getAttr(attrZ, lock = True)

if (lockX != True):
	cmds.parentConstraint(mo = False, st = ["x","y","z"], sr = ["y","z"], w = 1)
if (lockY != True):
	cmds.parentConstraint(mo = False, st = ["x","y","z"], sr = ["x","z"], w = 1)
if (lockZ != True):
	cmds.parentConstraint(mo = False, st = ["x","y","z"], sr = ["x","y"], w = 1)
	
#|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

global base_layer_name
base_layer_name = rotate_base_name + list_fixed[i]
global final_layer_name
final_layer_name = list_fixed[i] + '_layer_{0}'.format("0")

#if (cmds.objExists(base_layer_name)):
#	R_baking_to_layer(i)
#else:
cmds.animLayer(base_layer_name)
cmds.animLayer(base_layer_name, e = True, p = root_layer_name)
#R_baking_to_layer(i)

cmds.bakeResults(list_objects[i], t = (start_time, end_time), sm = True, bol = True, at = "rotate") 
cmds.select(list_objects[i], r = True)

if (check_cycle):
	cmds.setInfinity(pri = "cycle", poi = "cycle")
else:
	cmds.setInfinity(pri = "constant", poi = "constant")

cmds.delete(aim_locator, zeroLoc) #+
cmds.container("BakeResultsContainer", e = True, rc = True)
cmds.animLayer("BakeResults", e = True, p = base_layer_name)
cmds.rename("BakeResults", final_layer_name)
reset_range_time()
	
#cmds.select (d = True)

#for l in list_objects:
#	cmds.select (l, add = True)

#close_progressbar()

#print "\n||| OVERLAPPY ends rotation baking |||"
